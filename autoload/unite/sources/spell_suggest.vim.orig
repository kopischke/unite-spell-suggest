" unite-spell-suggest.vim - a spelling suggestion source for Unite
" Maintainer: Martin Kopischke <http://martin.kopischke.net>
"             based on work by MURAOKA Yusuke <yusuke@jbking.org>
" License:    MIT (see LICENSE.md)
" Version:    1.0
if !has('spell') || &compatible || v:version < 700
  finish
endif

" 'spell_suggest' source: spelling suggestions for Unite
function! unite#sources#spell_suggest#define()
  return get(s:, 'unite_source', [])
endfunction

<<<<<<< HEAD
" Define 'substitution' kind: {{{1
" defined here because of its tight coupling to s:cword
let s:unite_kind_substitution                = {'name': 'substitution'}
let s:unite_kind_substitution.default_action = 'replace'
let s:unite_kind_substitution.action_table   = {
  \ 'replace':
  \   {'description': 'replace the current word with the candidate'},
  \ 'replace_all':
  \   {'description': 'replace all occurences of the current word with the candidate'}
  \ }

" * 'replace' [word under cursor] action
function! s:unite_kind_substitution.action_table.replace.func(candidate) abort
  if s:cword.focus() && match(getline(s:cword.lnum), '^\M' . s:cword.before . s:cword.word) == 0
    call setline(s:cword.lnum, s:cword.before . a:candidate.word . s:cword.after)
    call cursor(s:cword.lnum, len(s:cword.before) + len(a:candidate.word))
  endif
endfunction

" * 'replace all' [occurrences] action
function! s:unite_kind_substitution.action_table.replace_all.func(candidate) abort
  if s:cword.focus()
    execute '% substitute/\<'.s:cword.word.'\>/'.a:candidate.word.'/Ig'
  endif
endfunction

call unite#define_kind(s:unite_kind_substitution)

" Define 'spell_suggest' source: {{{1
=======
>>>>>>> live-window
let s:unite_source = {
  \ 'name'       : 'spell_suggest',
  \ 'description': 'candidates from spellsuggest()',
  \ 'hooks'      : {},
  \ }

" * candidate listing
function! s:unite_source.gather_candidates(args, context) abort
<<<<<<< HEAD
  if &spell == 0
    return []
  endif

  " get info about word under cursor
  let s:cword       = {}
  let s:cword.word  = s:trim(expand('<cword>'))
  let s:cword.bufnr = bufnr('%')
  let s:cword.lnum  = line('.')
  let s:cword.col   = col('.')

  " return to position of word under cursor
  function! s:cword.focus() dict
    try
      execute 'buffer' self.bufnr
      if line('$') < self.lnum || col([self.lnum, '$']) < self.col
        return 0
      endif
      call cursor(self.lnum, self.col)
      return 1
    catch
      return 0
    endtry
  endfunction

  " highlight replaceable word
  function! s:cword.highlight() dict
    try
      highlight default link uniteSource_spell_suggest_Replaceable Search
      let self.hi_id = matchadd('uniteSource_spell_suggest_Replaceable',
        \ '^\%'.self.lnum.'l\M'.self.before.'\zs'.self.word)
    catch
      let self.hi_id = 0
    endtry
  endfunction

  " extract leading and trailing line parts using regexes only, as string
  " indexes are byte-based and thus not multi-byte safe to iterate
  let l:line = getline(s:cword.lnum)
  if match(s:cword.word, '\M'.s:curchar().'$') != -1 && match(s:cword.word, '\M'.s:nextchar()) == -1
    " we are on the last character, but not on the end of the line:
    " using matchend() to the end of a word would get us the next word
    " instead of the current one
    let l:including = matchstr(l:line, '^.*\%'.s:cword.col.'c.')
=======
  " get word to base suggestions on
  if len(a:args) == 0
    let s:cword = s:do_outside_unite(a:context, function('s:cword_info'))
    let l:word  = s:cword.word
    let l:kind  = s:cword.modifiable ? 'substitution' : 'word'
>>>>>>> live-window
  else
    let s:cword = {}
    let l:word  = mklib#string#trim(a:args[0] == '?' ? input('Suggest spelling for: ', '', 'history') : a:args[0])
    let l:kind  = 'word'
  endif

  " get suggestions
<<<<<<< HEAD
  if l:word == ''
    return []
  else
    if s:cword.word != '' && &modifiable
      let l:kind  = 'substitution'
      call s:cword.highlight()
    else
      let l:kind  = 'word'
    endif

    let l:limit       = get(g:, 'unite_spell_suggest_limit', 0)
    let l:suggestions = l:limit > 0 ? spellsuggest(l:word, l:limit) : spellsuggest(l:word)
    return map(l:suggestions,
      \'{"word": v:val,
      \  "abbr": printf("%2d: %s", v:key+1, v:val),
      \  "kind": l:kind}')
  endif
=======
  let l:suggestions = s:do_outside_unite(a:context, function('spellsuggest'), l:word)
  return map(l:suggestions,
    \'{"word"               : v:val,
    \  "abbr"               : printf("%2d: %s", v:key+1, v:val),
    \  "kind"               : l:kind,
    \  "source__target_word": l:word}')
>>>>>>> live-window
endfunction

" * syntax highlighting
function! s:unite_source.hooks.on_syntax(args, context)
  syntax match uniteSource_spell_suggest_LineNr /^\s\+\d\+:/
  highlight default link uniteSource_spell_suggest_LineNr LineNr
endfunction

<<<<<<< HEAD
" * remove replaceable word highlighting on close
function! s:unite_source.hooks.on_close(args, context)
  if s:cword.hi_id > 0
    execute 'autocmd BufEnter <buffer='.s:cword.bufnr.'> call matchdelete('.s:cword.hi_id.') | autocmd! BufEnter <buffer>'
  endif
endfunction

" Helper functions: {{{1
" * get character under cursor
function! s:curchar()
  return matchstr(getline('.'), '\%'.col('.').'c.')
=======
" * set up live sync autocmd group
function! s:unite_source.hooks.on_init(args, context)
  if !empty(a:context) && empty(a:args)
    let s:context = a:context
    augroup unite_spell_suggest
      autocmd!
      autocmd BufEnter,CursorMoved,CursorMovedI * call s:unite_source.source__update()
    augroup END
  endif
>>>>>>> live-window
endfunction

" * remove live sync autocmd group
function! s:unite_source.hooks.on_close(args, context)
  call s:unite_source.source__cleanup()
endfunction

" * trigger suggestion update if cword changes
function! s:unite_source.source__update() dict
  try
    if &spell && &filetype !~? 'unite\|quickfix' && s:cword != s:cword_info()
      call unite#force_redraw(unite#helper#get_unite_winnr(s:context.buffer_name))
    endif
  catch
    call s:unite_source.source__cleanup()
  endtry
endfunction

" * clean up after source
function! s:unite_source.source__cleanup() dict
  silent! autocmd! unite_spell_suggest
  silent! augroup! unite_spell_suggest
endfunction

" Helper functions: {{{1
" * get info about word under cursor
function! s:cword_info()
  return {'word': mklib#string#trim(expand('<cword>')), 'modifiable': &modifiable}
endfunction

" * execute function out of Unite context
function! s:do_outside_unite(unite_context, funcref, ...) abort
  let l:unite_winnr = !empty(a:unite_context) ? unite#helper#get_unite_winnr(a:unite_context.buffer_name) : -1
  if l:unite_winnr > -1 && winnr() == l:unite_winnr
    wincmd p
    try
      return call(a:funcref, a:000)
    finally
      execute l:unite_winnr.'wincmd w'
    endtry
  else
    return call(a:funcref, a:000)
  endif
endfunction " }}}

" vim:set sw=2 sts=2 ts=8 et fdm=marker fdo+=jump fdl=1:
